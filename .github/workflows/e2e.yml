name: e2e

on:
  push:
    branches:
      - 'master'
      - 'v*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
      - 'v*'
    paths-ignore:
      - '**.md'

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Prepare
        id: prep
        run: |
          echo ::set-output name=build_tag::swarm-cronjob:local
          echo ::set-output name=service_name::swarm-cronjob
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::Number of cronjob tasks: 6
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build
        uses: docker/bake-action@v1
        with:
          targets: image-local
      -
        name: Swarm init
        run: |
          docker swarm leave --force > /dev/null 2>&1 || true
          docker swarm init --advertise-addr $(dig +short myip.opendns.com @resolver1.opendns.com)
      -
        name: Swarm deploy stacks
        run: |
          docker stack deploy date -c test/date.yml
          docker stack deploy sleep -c test/sleep.yml
          docker stack deploy error -c test/error.yml
          docker stack deploy configs -c test/configs.yml
          docker stack deploy global -c test/global.yml
          docker stack deploy more_replicas -c test/more_replicas.yml
      -
        name: Create service
        run: |
          docker service create --name ${{ steps.prep.outputs.service_name }} \
            --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
            --env "LOG_LEVEL=debug" \
            --env "LOG_JSON=false" \
            --constraint 'node.role == manager' \
            ${{ steps.prep.outputs.build_tag }}
      -
        name: Test service
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prep.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prep.outputs.running_log_check }}"* ]]; then
              echo "🎉 Service up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prep.outputs.service_name }} service"
              docker swarm leave --force > /dev/null 2>&1 || true
              exit 1
            fi
          done < <(docker service logs -f ${{ steps.prep.outputs.service_name }} 2>&1)
          docker swarm leave --force > /dev/null 2>&1 || true
